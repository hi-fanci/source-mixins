@use "./breakpoints" as *;
@use "./function" as *;

// cursor
$cursors: (pointer, auto);

@include media_min_query() {
    @each $cursor in $cursors {
        %cursor-#{$cursor} {
            cursor: $cursor !important;
        }
    }
}

// only pc - sp
%pc {
    display: none !important;
    @include media_min_query() {
        display: initial !important;
    }
}
%sp {
    @include media_min_query() {
        display: none !important;
    }
}

// -- display
$displays: (
    "i": inline,
    "if": inline-flex,
    "ib": inline-block,
    "f": flex,
    "b": block,
    "n": none
);
@each $name, $prop in $displays {
    %d-#{$name} {
        display: $prop !important;
    }
}
@each $bp in $media_min_query_all {
    @include media_min_query($bp) {
        @each $name, $prop in $displays {
            %#{$bp}-d-#{$name} {
                display: $prop !important;
            }
        }
    }
}

// -- direction
$flex-directions: (
    "row": row,
    "row-re": row-reverse,
    "col": column,
    "col-re": column-reverse
);
@each $name, $prop in $flex-directions {
    %flex-#{$name} {
        flex-direction: $prop !important;
    }
}
@each $bp in $media_min_query_all {
    @include media_min_query($bp) {
        @each $name, $prop in $flex-directions {
            %#{$bp}-flex-#{$name} {
                flex-direction: $prop !important;
            }
        }
    }
}

$object-fit: ("contain", "fill", "cover", "none");
@each $prop in $object-fit {
    %o-#{$prop} {
        object-fit: $prop;
    }
}
@each $bp in $media_min_query_all {
    @include media_min_query($bp) {
        @each $prop in $object-fit {
            %#{$bp}-o-#{$prop} {
                object-fit: $prop;
            }
        }
    }
}

//
%img-fill {
    width: 100%;
    height: 100%;
}

// letter spacing
$lts: (-50, -100, 0, 50, 100);
@each $prop in $lts {
    %lts-#{$prop} {
        letter-spacing: #{$prop * 0.001em};
    }
}

// line - clamp
%line-clamp {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
}
@include media_min_query() {
    %md-line-clamp {
        overflow: hidden;
        display: -webkit-box;
        -webkit-box-orient: vertical;
    }
}

@for $i from 1 through 3 {
    %line-clamp-#{$i} {
        -webkit-line-clamp: $i;
        line-clamp: $i;
    }
}
@include media_min_query() {
    @for $i from 1 through 3 {
        %md-line-clamp-#{$i} {
            -webkit-line-clamp: $i;
            line-clamp: $i;
        }
    }
}

// position
$positions: (
    "fix": fixed,
    "sti": sticky,
    "abs": absolute,
    "rel": relative,
    "sta": static
);
@each $name, $prop in $positions {
    %p-#{$name} {
        position: $prop !important;
    }
}
@each $bp in $media_min_query_all {
    @include media_min_query($bp) {
        @each $name, $prop in $positions {
            %#{$bp}-p-#{$name} {
                position: $prop !important;
            }
        }
    }
}

//
$text-aligns: (
    "l": left,
    "r": right,
    "c": center
);

// -- text-align
@each $name, $prop in $text-aligns {
    %txt-#{$name} {
        text-align: $prop !important;
    }
}
@each $bp in $media_min_query_all {
    @include media_min_query($bp) {
        @each $name, $prop in $text-aligns {
            %#{$bp}-txt-#{$name} {
                text-align: $prop !important;
            }
        }
    }
}

// -- text-transform-uppercase
%txt-u {
    text-transform: uppercase;
}

// -- font-feature-settings
%txt-p {
    font-feature-settings: "palt";
}

// -- text phone number
%txt-phone {
    @include media_min_query() {
        pointer-events: none;
    }
}

// font-family
$font-sans-serif: (
    "barlow": "Barlow",
    "barlow-con": "Barlow Condensed",
    "bebas": "Bebas Neue",
    "inter": "Inter",
    "lato": "Lato",
    "lora": "Lora",
    "mont-serrat": "Montserrat",
    "noto-sans": "Noto Sans JP",
    "nunito": "Nunito Sans",
    "outfit": "Outfit",
    "oswald": "Oswald",
    "poppins": "Poppins",
    "roboto": "Roboto",
    "roboto-c": "Roboto Condensed",
    "rubik": "Rubik",
    "ubuntu": "Ubuntu",
    "overpass": "Overpass"
);
$font-serif: (
    "noto-serif": "Noto Serif JP",
    "ovo": "Ovo",
    "zen-maru": "Zen Maru Gothic"
);

@each $name, $prop in $font-sans-serif {
    %ff-#{$name} {
        font-family:
            #{$prop},
            sans-serif !important;
    }
}
@each $name, $prop in $font-serif {
    %ff-#{$name} {
        font-family:
            #{$prop},
            serif !important;
    }
}

// open with html 100%
// $p2r: 0.0625rem;

// open with html 62.5%
$p2r: 0.1rem;
$fonts: (
    "16": (
        "sp": 14,
        "pc": 16
    ),
    "160": (
        "sp": 40,
        "liq": (
            40,
            100
        )
    )
);

@each $name, $arr in $fonts {
    %fz-#{ $name } {
        @each $type, $unit in $arr {
            @if ($type == "sp") {
                font-size: $unit * $p2r;
            } @else if ($type == "pc") {
                @include media_min_query() {
                    font-size: $unit * $p2r;
                }
            } @else {
                @include media_min_query() {
                    font-size: fn-liq(nth($unit, 1), nth($unit, 2));
                }
            }
        }
    }
}

// font-weight
@for $i from 1 to 10 {
    %fw-#{$i * 100} {
        font-weight: #{$i * 100};
    }
}
